// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var data, f, height, line, makeCounter, margin, n, path, simulationRunning, startSimulation, stopSimulation, svg, tick, timer, width, xScale, yScale;
    $("#start").click(function() {
      return startSimulation();
    });
    $("#stop").click(function() {
      return stopSimulation();
    });
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };
    width = 840 - margin.left - margin.right;
    height = 240 - margin.top - margin.bottom;
    svg = d3.select("#graph").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    svg.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", width).attr("height", height);
    svg.append("rect").attr("width", width).attr("height", height).attr("fill", "none").attr("stroke", "black").attr("stroke-width", 0.5);
    n = 100;
    xScale = d3.scale.linear().domain([0, n - 1]).range([0, width]);
    yScale = d3.scale.linear().domain([-5, 5]).range([height, 0]);
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + yScale(0) + ")").call(d3.svg.axis().scale(xScale).orient("bottom"));
    svg.append("g").attr("class", "y axis").call(d3.svg.axis().scale(yScale).orient("left"));
    line = d3.svg.line().x(function(d, i) {
      return xScale(i);
    }).y(function(d, i) {
      return yScale(f(d));
    }).interpolate("basis");
    f = Math.sin;
    data = [];
    while (data.length < n) {
      data.push(0);
    }
    path = svg.append("g").attr("clip-path", "url(#clip)").append("path").attr("d", line(data)).attr("stroke", "blue").attr("stroke-width", 2).attr("fill", "none");
    simulationRunning = false;
    startSimulation = function() {
      simulationRunning = true;
      console.log("Simulation started");
      return tick();
    };
    stopSimulation = function() {
      simulationRunning = false;
      return console.log("Simulation ended");
    };
    makeCounter = function(delta) {
      var t;
      t = 0;
      return function() {
        var r;
        r = t;
        t += delta;
        return r;
      };
    };
    timer = makeCounter(1);
    tick = function() {
      var t;
      if (simulationRunning) {
        t = timer();
        data.push(t);
        console.log(t);
        path.attr("d", line(data)).attr("transform", null).transition().duration(50).ease("linear").attr("transform", "translate(" + xScale(-1) + ",0)").each("end", tick);
        return data.shift();
      }
    };
    return null;
  });

}).call(this);
