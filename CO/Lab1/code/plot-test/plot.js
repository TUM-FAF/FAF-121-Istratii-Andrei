// Generated by CoffeeScript 1.7.1

/*
if window.performance.now
  console.log "Using high performance timer"
  getTimeStamp = () -> window.performance.now()
else
  if window.performance.webkitNow
    console.log "Using webkit high performance timer"
    getTimeStamp = () -> window.performance.webkitNow()
  else
    console.log "Using low performance timer"
    getTimeStamp = () -> new Date().getTime()
 */

(function() {
  var plot, rk4, rk4v;

  rk4v = function(fs, h, t, ys) {
    var h2, k1, k2, k3, k4, scalarMul, u, v, vectorSum, w;
    vectorSum = function(v1, v2) {
      var i, res, v, _i, _len;
      res = [];
      for (i = _i = 0, _len = v1.length; _i < _len; i = ++_i) {
        v = v1[i];
        res.push(v1[i] + v2[i]);
      }
      return res;
    };
    scalarMul = function(v, a) {
      return v.map(function(x) {
        return x * a;
      });
    };
    h2 = 0.5 * h;
    k1 = fs.map(function(f) {
      return f(t, ys);
    });
    k2 = fs.map(function(f) {
      return f(t + h2, vectorSum(ys, scalarMul(k1, h2)));
    });
    k3 = fs.map(function(f) {
      return f(t + h2, vectorSum(ys, scalarMul(k2, h2)));
    });
    k4 = fs.map(function(f) {
      return f(t + h, vectorSum(ys, scalarMul(k3, h)));
    });
    u = scalarMul(k2, 2);
    v = scalarMul(k3, 2);
    w = vectorSum(vectorSum(vectorSum(k1, u), v), k4);
    return vectorSum(ys, scalarMul(w, (1 / 6.0) * h));
  };

  rk4 = function(f, h, t, ys) {
    var h2, k1, k2;
    h2 = 0.5 * h;
    k1 = f(t, ys);
    return k2 = f(t + h2);
  };

  plot = function(graphID, xData, yData, width, height) {
    var line, margin, path, svg, xScale, yScale;
    margin = {
      top: 100,
      right: 100,
      bottom: 100,
      left: 100
    };
    svg = d3.select("#" + graphID).append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    svg.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", width).attr("height", height);
    svg.append("rect").attr("width", width).attr("height", height).attr("fill", "none").attr("stroke", "black").attr("stroke-width", 0.5);
    xScale = d3.scale.linear().domain([d3.min(xData), d3.max(xData)]).range([0, width]);
    yScale = d3.scale.linear().domain([d3.min(yData), d3.max(yData)]).range([height, 0]);
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + yScale(0) + ")").call(d3.svg.axis().scale(xScale).orient("bottom"));
    svg.append("g").attr("class", "y axis").call(d3.svg.axis().scale(yScale).orient("left"));
    line = d3.svg.line().x(function(d, i) {
      return xScale(xData[i]);
    }).y(function(d, i) {
      return yScale(yData[i]);
    }).interpolate("basis");
    return path = svg.append("g").attr("clip-path", "url(#clip)").append("path").attr("d", line(xData)).attr("stroke", "blue").attr("stroke-width", 2).attr("fill", "none");
  };

  $(function() {
    var fs, g, i, x, xs, ys, zs, _i, _len;
    xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    ys = [[0, 1]];
    g = function(x) {
      return Math.cos(x);
    };
    fs = [
      function(t, ys) {
        return ys[0];
      }, function(t, ys) {
        return ys[1];
      }
    ];
    for (i = _i = 0, _len = xs.length; _i < _len; i = ++_i) {
      x = xs[i];
      ys.push(rk4(fs, 1, xs[i], [].concat(ys[i])));
    }
    ys = ys.map(function(a) {
      return a[1];
    });
    zs = xs.map(function(x) {
      return 2 - Math.cos(x);
    });
    console.log(ys);
    console.log(zs);
    plot("graph1", xs, ys, 800, 400);
    return plot("graph2", xs, zs, 800, 400);
  });

}).call(this);
